/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ServiceArea as PrismaServiceArea } from "@prisma/client";

export class ServiceAreaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceAreaCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceArea.count(args);
  }

  async serviceAreas(
    args: Prisma.ServiceAreaFindManyArgs
  ): Promise<PrismaServiceArea[]> {
    return this.prisma.serviceArea.findMany(args);
  }
  async serviceArea(
    args: Prisma.ServiceAreaFindUniqueArgs
  ): Promise<PrismaServiceArea | null> {
    return this.prisma.serviceArea.findUnique(args);
  }
  async createServiceArea(
    args: Prisma.ServiceAreaCreateArgs
  ): Promise<PrismaServiceArea> {
    return this.prisma.serviceArea.create(args);
  }
  async updateServiceArea(
    args: Prisma.ServiceAreaUpdateArgs
  ): Promise<PrismaServiceArea> {
    return this.prisma.serviceArea.update(args);
  }
  async deleteServiceArea(
    args: Prisma.ServiceAreaDeleteArgs
  ): Promise<PrismaServiceArea> {
    return this.prisma.serviceArea.delete(args);
  }
}

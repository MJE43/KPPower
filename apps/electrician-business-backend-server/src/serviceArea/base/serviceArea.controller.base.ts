/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceAreaService } from "../serviceArea.service";
import { ServiceAreaCreateInput } from "./ServiceAreaCreateInput";
import { ServiceArea } from "./ServiceArea";
import { ServiceAreaFindManyArgs } from "./ServiceAreaFindManyArgs";
import { ServiceAreaWhereUniqueInput } from "./ServiceAreaWhereUniqueInput";
import { ServiceAreaUpdateInput } from "./ServiceAreaUpdateInput";

export class ServiceAreaControllerBase {
  constructor(protected readonly service: ServiceAreaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceArea })
  async createServiceArea(
    @common.Body() data: ServiceAreaCreateInput
  ): Promise<ServiceArea> {
    return await this.service.createServiceArea({
      data: data,
      select: {
        areaName: true,
        areaZipCode: true,
        createdAt: true,
        id: true,
        mapUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceArea] })
  @ApiNestedQuery(ServiceAreaFindManyArgs)
  async serviceAreas(@common.Req() request: Request): Promise<ServiceArea[]> {
    const args = plainToClass(ServiceAreaFindManyArgs, request.query);
    return this.service.serviceAreas({
      ...args,
      select: {
        areaName: true,
        areaZipCode: true,
        createdAt: true,
        id: true,
        mapUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceArea })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceArea(
    @common.Param() params: ServiceAreaWhereUniqueInput
  ): Promise<ServiceArea | null> {
    const result = await this.service.serviceArea({
      where: params,
      select: {
        areaName: true,
        areaZipCode: true,
        createdAt: true,
        id: true,
        mapUrl: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceArea })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceArea(
    @common.Param() params: ServiceAreaWhereUniqueInput,
    @common.Body() data: ServiceAreaUpdateInput
  ): Promise<ServiceArea | null> {
    try {
      return await this.service.updateServiceArea({
        where: params,
        data: data,
        select: {
          areaName: true,
          areaZipCode: true,
          createdAt: true,
          id: true,
          mapUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceArea })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceArea(
    @common.Param() params: ServiceAreaWhereUniqueInput
  ): Promise<ServiceArea | null> {
    try {
      return await this.service.deleteServiceArea({
        where: params,
        select: {
          areaName: true,
          areaZipCode: true,
          createdAt: true,
          id: true,
          mapUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

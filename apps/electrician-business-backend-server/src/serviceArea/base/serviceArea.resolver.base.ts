/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceArea } from "./ServiceArea";
import { ServiceAreaCountArgs } from "./ServiceAreaCountArgs";
import { ServiceAreaFindManyArgs } from "./ServiceAreaFindManyArgs";
import { ServiceAreaFindUniqueArgs } from "./ServiceAreaFindUniqueArgs";
import { CreateServiceAreaArgs } from "./CreateServiceAreaArgs";
import { UpdateServiceAreaArgs } from "./UpdateServiceAreaArgs";
import { DeleteServiceAreaArgs } from "./DeleteServiceAreaArgs";
import { ServiceAreaService } from "../serviceArea.service";
@graphql.Resolver(() => ServiceArea)
export class ServiceAreaResolverBase {
  constructor(protected readonly service: ServiceAreaService) {}

  async _serviceAreasMeta(
    @graphql.Args() args: ServiceAreaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceArea])
  async serviceAreas(
    @graphql.Args() args: ServiceAreaFindManyArgs
  ): Promise<ServiceArea[]> {
    return this.service.serviceAreas(args);
  }

  @graphql.Query(() => ServiceArea, { nullable: true })
  async serviceArea(
    @graphql.Args() args: ServiceAreaFindUniqueArgs
  ): Promise<ServiceArea | null> {
    const result = await this.service.serviceArea(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceArea)
  async createServiceArea(
    @graphql.Args() args: CreateServiceAreaArgs
  ): Promise<ServiceArea> {
    return await this.service.createServiceArea({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ServiceArea)
  async updateServiceArea(
    @graphql.Args() args: UpdateServiceAreaArgs
  ): Promise<ServiceArea | null> {
    try {
      return await this.service.updateServiceArea({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceArea)
  async deleteServiceArea(
    @graphql.Args() args: DeleteServiceAreaArgs
  ): Promise<ServiceArea | null> {
    try {
      return await this.service.deleteServiceArea(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

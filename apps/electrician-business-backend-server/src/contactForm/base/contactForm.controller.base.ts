/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContactFormService } from "../contactForm.service";
import { ContactFormCreateInput } from "./ContactFormCreateInput";
import { ContactForm } from "./ContactForm";
import { ContactFormFindManyArgs } from "./ContactFormFindManyArgs";
import { ContactFormWhereUniqueInput } from "./ContactFormWhereUniqueInput";
import { ContactFormUpdateInput } from "./ContactFormUpdateInput";

export class ContactFormControllerBase {
  constructor(protected readonly service: ContactFormService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContactForm })
  async createContactForm(
    @common.Body() data: ContactFormCreateInput
  ): Promise<ContactForm> {
    return await this.service.createContactForm({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContactForm] })
  @ApiNestedQuery(ContactFormFindManyArgs)
  async contactForms(@common.Req() request: Request): Promise<ContactForm[]> {
    const args = plainToClass(ContactFormFindManyArgs, request.query);
    return this.service.contactForms({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContactForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contactForm(
    @common.Param() params: ContactFormWhereUniqueInput
  ): Promise<ContactForm | null> {
    const result = await this.service.contactForm({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContactForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContactForm(
    @common.Param() params: ContactFormWhereUniqueInput,
    @common.Body() data: ContactFormUpdateInput
  ): Promise<ContactForm | null> {
    try {
      return await this.service.updateContactForm({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          message: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContactForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContactForm(
    @common.Param() params: ContactFormWhereUniqueInput
  ): Promise<ContactForm | null> {
    try {
      return await this.service.deleteContactForm({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          message: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
